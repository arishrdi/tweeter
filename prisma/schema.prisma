// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  // url      = env("DATABASE_URL")
  url = env("DATABASE_URL")
}

model Bookmark {
  id      Int    @id @default(autoincrement())
  userId  String
  tweetId Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model Retweet {
  id      Int    @id @default(autoincrement())
  userId  String
  tweetId Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model Comment {
  id      Int    @id @default(autoincrement())
  message String

  userId  String
  tweetId Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model Like {
  id      Int    @id @default(autoincrement())
  userId  String
  tweetId Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model Tweet {
  id        Int        @id @default(autoincrement())
  userId    String
  content   String
  image     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
  comments  Comment[]
  retweets  Retweet[]
  bookmarks Bookmark[]
}

model Follower {
  id             Int    @id @default(autoincrement())
  userId         String
  followerUserId String

  user          User @relation("follower", fields: [userId], references: [id], onDelete: Cascade)
  followingUser User @relation("following", fields: [followerUserId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  password      String?
  username      String?    @unique
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  coverProfile  String?
  bio           String?
  accounts      Account[]
  sessions      Session[]
  tweets        Tweet[]
  followers     Follower[] @relation("following")
  followings    Follower[] @relation("follower")
  likes         Like[]
  comments      Comment[]
  retweets      Retweet[]
  bookmarks     Bookmark[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
